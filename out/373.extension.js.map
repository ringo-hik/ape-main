{"version":3,"file":"373.extension.js","mappings":"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","sources":[".././src/test/helpers/auto-permission.ts"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n/**\r\n * VSCode 확장에서 권한 요청을 자동으로 처리하는 헬퍼 클래스\r\n * 권한 요청 다이얼로그를 자동으로 수락하거나 무시합니다.\r\n */\r\nexport class AutoPermissionHandler {\r\n  private static instance: AutoPermissionHandler;\r\n  private disposables: vscode.Disposable[] = [];\r\n  private permissionConfig: any;\r\n\r\n  private constructor() {\r\n    try {\r\n      // 권한 설정 파일 로드\r\n      const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\r\n      const configPath = path.join(workspaceRoot, 'auth-permissions.json');\r\n      \r\n      if (fs.existsSync(configPath)) {\r\n        this.permissionConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));\r\n        console.log('권한 설정 파일 로드됨:', configPath);\r\n      } else {\r\n        this.permissionConfig = {};\r\n        console.log('권한 설정 파일을 찾을 수 없음. 기본 설정 사용');\r\n      }\r\n\r\n      // VSCode 환경에 권한 자동 처리 설정\r\n      this.setupAutoPermissions();\r\n    } catch (error) {\r\n      console.error('권한 핸들러 초기화 오류:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 싱글톤 인스턴스 가져오기\r\n   */\r\n  public static getInstance(): AutoPermissionHandler {\r\n    if (!AutoPermissionHandler.instance) {\r\n      AutoPermissionHandler.instance = new AutoPermissionHandler();\r\n    }\r\n    return AutoPermissionHandler.instance;\r\n  }\r\n\r\n  /**\r\n   * 자동 권한 처리 설정\r\n   */\r\n  private setupAutoPermissions(): void {\r\n    // 메시지 처리기 등록\r\n    const messageHandler = vscode.window.registerWebviewPanelSerializer('apeChat', {\r\n      deserializeWebviewPanel: async (webviewPanel: vscode.WebviewPanel) => {\r\n        // 웹뷰에 자동 권한 수락 스크립트 주입\r\n        webviewPanel.webview.html = this.injectAutoPermissionScript(webviewPanel.webview.html);\r\n      }\r\n    });\r\n\r\n    // 권한 관련 명령 등록\r\n    const grantCommand = vscode.commands.registerCommand('ape.autoGrantPermission', () => {\r\n      vscode.window.showInformationMessage('모든 권한이 자동으로 허용됩니다.');\r\n      return true; // 항상 허용\r\n    });\r\n\r\n    this.disposables.push(messageHandler, grantCommand);\r\n  }\r\n\r\n  /**\r\n   * 웹뷰 HTML에 자동 권한 수락 스크립트 주입\r\n   */\r\n  private injectAutoPermissionScript(html: string): string {\r\n    const autoPermissionScript = `\r\n      <script>\r\n        // 권한 자동 수락 설정\r\n        window.permissionAutoAccept = true;\r\n        \r\n        // 브라우저 API 권한 요청을 자동 수락하도록 오버라이드\r\n        if (window.navigator.permissions && window.navigator.permissions.query) {\r\n          const originalQuery = window.navigator.permissions.query;\r\n          window.navigator.permissions.query = function(permissionDesc) {\r\n            console.log('[AutoPermission] 권한 자동 허용:', permissionDesc);\r\n            return Promise.resolve({\r\n              state: 'granted',\r\n              addEventListener: () => {}\r\n            });\r\n          };\r\n        }\r\n        \r\n        // 모달 및 대화상자 자동 수락\r\n        if (!window._autoPermissionSetup) {\r\n          window._autoPermissionSetup = true;\r\n          \r\n          // 확인 대화상자 자동 수락\r\n          window.confirm = function() { \r\n            console.log('[AutoPermission] 확인 대화상자 자동 수락');\r\n            return true; \r\n          };\r\n          \r\n          // 알림 대화상자 자동 닫기\r\n          window.alert = function(msg) { \r\n            console.log('[AutoPermission] 알림 대화상자 자동 닫기:', msg);\r\n          };\r\n          \r\n          // 프롬프트 대화상자 자동 응답\r\n          window.prompt = function(msg, defaultValue) { \r\n            console.log('[AutoPermission] 프롬프트 대화상자 자동 응답:', msg);\r\n            return defaultValue || ''; \r\n          };\r\n          \r\n          console.log('[AutoPermission] 모든 권한 자동 수락 설정 완료');\r\n        }\r\n      </script>\r\n    `;\r\n\r\n    // </head> 태그 앞에 스크립트 추가\r\n    if (html.includes('</head>')) {\r\n      return html.replace('</head>', `${autoPermissionScript}\\n</head>`);\r\n    } else {\r\n      // <head> 태그가 없으면 시작 부분에 추가\r\n      return `${autoPermissionScript}\\n${html}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 리소스 해제\r\n   */\r\n  public dispose(): void {\r\n    this.disposables.forEach(d => d.dispose());\r\n    this.disposables = [];\r\n  }\r\n}\r\n\r\n// 자동으로 인스턴스 생성 및 초기화\r\nexport const autoPermissionHandler = AutoPermissionHandler.getInstance();"],"names":[],"sourceRoot":""}