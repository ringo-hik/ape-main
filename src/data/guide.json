{
  "version": "1.0.0",
  "lastUpdated": "2023-05-08",
  "workflows": [
    {
      "id": "git",
      "name": "Git 개발 워크플로우",
      "description": "Git 기반 개발 작업 시 사용할 수 있는 명령어와 워크플로우 가이드입니다.",
      "setupQuestions": [
        "Git 형상이 세팅됐나요?", 
        "브랜치를 생성해야 하나요?",
        "변경 사항을 커밋해야 하나요?",
        "자동 커밋을 설정하고 싶으신가요?"
      ],
      "recommendedCommands": [
        {
          "name": "git status",
          "description": "현재 Git 저장소 상태 확인",
          "command": "/git status",
          "context": "작업 시작 전 현재 Git 상태 확인"
        },
        {
          "name": "git commit",
          "description": "변경사항 자동 커밋 (메시지 자동 생성)",
          "command": "/git commit",
          "context": "작업 완료 후 변경사항 저장"
        },
        {
          "name": "git auto",
          "description": "자동 커밋 기능 켜거나 끄기",
          "command": "/git auto",
          "context": "반복적인 변경사항 자동 저장 필요 시"
        },
        {
          "name": "git consolidate",
          "description": "임시 커밋 통합하기",
          "command": "/git consolidate",
          "context": "자동 커밋으로 생성된 임시 커밋들 통합 필요 시"
        }
      ]
    },
    {
      "id": "jira",
      "name": "Jira 이슈 관리",
      "description": "Jira 이슈 관리와 관련된 작업 흐름 가이드입니다.",
      "setupQuestions": [
        "Jira 작업이 필요한가요?",
        "어떤 이슈를 처리해야 하나요?",
        "이슈 상태를 변경해야 하나요?",
        "작업 로그를 기록해야 하나요?"
      ],
      "recommendedCommands": [
        {
          "name": "jira list",
          "description": "Jira 이슈 목록 확인",
          "command": "/jira list",
          "context": "담당한 이슈 목록 확인 필요 시"
        },
        {
          "name": "jira status",
          "description": "이슈 상태 변경",
          "command": "/jira status [이슈ID] [상태]",
          "context": "이슈 진행 상태 업데이트 필요 시"
        },
        {
          "name": "jira comment",
          "description": "이슈에 코멘트 추가",
          "command": "/jira comment [이슈ID] [내용]",
          "context": "이슈에 작업 내용이나 피드백 추가 필요 시"
        },
        {
          "name": "jira log",
          "description": "작업 시간 로그 기록",
          "command": "/jira log [이슈ID] [시간]",
          "context": "작업 시간 기록 필요 시"
        }
      ]
    },
    {
      "id": "swdp",
      "name": "SWDP 작업",
      "description": "SW 개발 프로세스(SWDP) 관련 작업 흐름 가이드입니다.",
      "setupQuestions": [
        "SWDP 작업이 필요한가요?",
        "어떤 단계의 작업인가요?",
        "리뷰어를 지정해야 하나요?",
        "문서를 업데이트해야 하나요?"
      ],
      "recommendedCommands": [
        {
          "name": "swdp status",
          "description": "SWDP 상태 확인",
          "command": "/swdp status",
          "context": "현재 프로젝트의 SWDP 상태 확인 필요 시"
        },
        {
          "name": "swdp review",
          "description": "코드 리뷰 요청",
          "command": "/swdp review [리뷰어]",
          "context": "코드 리뷰 요청 필요 시"
        },
        {
          "name": "swdp doc",
          "description": "SWDP 문서 업데이트",
          "command": "/swdp doc [문서타입]",
          "context": "프로젝트 문서 업데이트 필요 시"
        }
      ]
    },
    {
      "id": "code",
      "name": "코드 작업",
      "description": "코드 개발, 분석, 최적화 관련 작업 흐름 가이드입니다.",
      "setupQuestions": [
        "코드를 분석해야 하나요?",
        "코드 리팩토링이 필요한가요?",
        "새 파일을 생성해야 하나요?",
        "특정 파일을 찾아야 하나요?"
      ],
      "recommendedCommands": [
        {
          "name": "analyze",
          "description": "선택한 코드 분석",
          "command": "/analyze",
          "context": "현재 코드의 의미나 개선점 파악 필요 시"
        },
        {
          "name": "open",
          "description": "파일 열기",
          "command": "/open [파일경로]",
          "context": "특정 파일 열람 필요 시"
        },
        {
          "name": "model",
          "description": "LLM 모델 변경",
          "command": "/model [모델명]",
          "context": "다른 AI 모델 사용이 필요한 경우"
        },
        {
          "name": "help",
          "description": "도움말 표시",
          "command": "/help",
          "context": "사용 가능한 명령어 확인 필요 시"
        }
      ]
    },
    {
      "id": "search",
      "name": "프로젝트 검색",
      "description": "프로젝트 내 파일 및 코드 검색 관련 작업 흐름입니다.",
      "setupQuestions": [
        "프로젝트에서 파일을 검색해야 하나요?",
        "특정 코드 패턴을 찾아야 하나요?",
        "어떤 종류의 파일을 찾고 있나요?",
        "검색 범위를 좁혀야 하나요?"
      ],
      "recommendedCommands": [
        {
          "name": "search file",
          "description": "파일명으로 검색",
          "command": "/search file [파일명]",
          "context": "특정 이름의 파일 찾기 필요 시"
        },
        {
          "name": "search code",
          "description": "코드 내용 검색",
          "command": "/search code [패턴]",
          "context": "특정 코드 패턴 찾기 필요 시"
        },
        {
          "name": "search recent",
          "description": "최근 수정 파일 검색",
          "command": "/search recent",
          "context": "최근 작업한 파일 찾기 필요 시"
        },
        {
          "name": "search symbol",
          "description": "심볼(함수/클래스 등) 검색",
          "command": "/search symbol [심볼명]",
          "context": "특정 함수/클래스 정의 찾기 필요 시"
        }
      ]
    }
  ],
  "contextQuestions": [
    {
      "question": "Git 형상이 세팅됐나요?",
      "intent": "git_setup",
      "followups": [
        "Git 저장소를 초기화하고 싶으신가요?",
        "원격 저장소와 연결이 필요하신가요?",
        "브랜치 관리가 필요하신가요?"
      ]
    },
    {
      "question": "Jira 작업이 필요한가요?",
      "intent": "jira_work",
      "followups": [
        "어떤 이슈를 처리 중이신가요?",
        "이슈 상태를 업데이트하고 싶으신가요?",
        "작업 로그를 기록하고 싶으신가요?"
      ]
    },
    {
      "question": "SWDP 작업이 필요한가요?",
      "intent": "swdp_work",
      "followups": [
        "개발 단계 중 어디에 있으신가요?",
        "리뷰가 필요하신가요?",
        "문서화가 필요하신가요?"
      ]
    },
    {
      "question": "코드 분석이 필요한가요?",
      "intent": "code_analysis",
      "followups": [
        "어떤 코드를 분석하고 싶으신가요?",
        "코드 리팩토링이 필요하신가요?",
        "성능 최적화가 필요하신가요?"
      ]
    },
    {
      "question": "파일 검색이 필요한가요?",
      "intent": "file_search",
      "followups": [
        "어떤 파일을 찾고 계신가요?",
        "특정 코드 패턴을 검색하고 싶으신가요?",
        "최근 수정된 파일을 찾고 계신가요?"
      ]
    }
  ],
  "assistantResponses": {
    "unknown_command": [
      "입력하신 명령어를 찾을 수 없습니다. 현재 진행 중인 작업 컨텍스트에 기반하여 다음 명령어를 추천해 드립니다:",
      "알 수 없는 명령어입니다. 다음 명령어를 시도해 보시겠어요?",
      "해당 명령어는 존재하지 않습니다. 혹시 다음 중 하나를 찾으시나요?",
      "명령어를 인식할 수 없습니다. 현재 상황에 적합한 다음 명령어를 제안합니다:"
    ],
    "agentic_suggestions": [
      "현재 작업 컨텍스트를 분석해 보니, 다음과 같은 질문이나 작업을 원하시는 것 같습니다:",
      "다음 중 원하시는 작업이 있으신가요?",
      "현재 상황에서 다음과 같은 도움이 필요하실 수 있을 것 같습니다:",
      "다음 작업 중 진행하고 싶으신 것이 있으신가요?"
    ]
  },
  "commandGuides": [
    {
      "id": "help",
      "title": "도움말 명령어 가이드",
      "content": "## 도움말 명령어 사용법\n\n`/help` 명령어는 모든 슬래시 명령어의 목록과 상세 설명을 표시합니다. 다음과 같은 방식으로 사용할 수 있습니다:\n\n1. **기본 사용법**: `/help` - 모든 명령어 목록을 표시합니다.\n2. **카테고리 보기**: `/help git` - 특정 카테고리(git, code, utility 등)의 명령어만 표시합니다.\n3. **검색 기능**: `/help search 커밋 방법` - 특정 키워드에 대한 도움말을 검색합니다.\n4. **한글 사용법**: `/도움말`, `/도움말 검색 파일 열기`도 동일하게 작동합니다.\n5. **FAQ 보기**: `/help faq` - 자주 묻는 질문을 확인할 수 있습니다.\n6. **가이드 보기**: `/help guide` 또는 `/help guides` - 사용 가이드 목록을 표시합니다.\n\n**별칭**: `/?`, `/commands`, `/도움말`, `/도움`, `/명령어`, `/알려줘`, `/search`, `/검색`"
    },
    {
      "id": "clear",
      "title": "채팅 지우기 명령어 가이드",
      "content": "## 채팅 내역 지우기\n\n`/clear` 명령어를 사용하면 현재 채팅 내역을 모두 지울 수 있습니다. 이 명령어는 현재 세션의 채팅 내역만 지우며, 이전에 저장된 세션은 영향을 받지 않습니다.\n\n**별칭**: `/cls`, `/clean`, `/지우기`, `/초기화`, `/클리어`"
    },
    {
      "id": "save",
      "title": "대화 저장 명령어 가이드",
      "content": "## 대화 내용 저장하기\n\n`/save` 명령어를 사용하여 현재 대화 내용을 저장할 수 있습니다. 이 기능은 다음과 같이 작동합니다:\n\n1. 현재 채팅 내용을 마크다운 형식으로 변환합니다.\n2. LLM을 사용하여 자동으로 대화 제목을 생성합니다.\n3. 저장된 채팅은 프로젝트의 `vault/chat-history` 폴더에 저장됩니다.\n4. 트리 뷰에서 저장된 채팅을 확인하고 관리할 수 있습니다.\n\n**별칭**: `/stack`, `/history`, `/save`, `/기록`, `/대화기록`, `/저장`"
    },
    {
      "id": "show",
      "title": "저장된 대화 보기 가이드",
      "content": "## 저장된 대화 내용 확인하기\n\n`/show` 명령어를 사용하여 저장된 대화 내용을 확인할 수 있습니다:\n\n1. **기본 사용법**: `/show` - 저장된 모든 채팅 목록을 표시합니다.\n2. **특정 채팅 보기**: `/show 채팅ID` - 특정 채팅 내용을 자세히 볼 수 있습니다.\n\n**별칭**: `/view`, `/display`, `/보기`, `/내역보기`, `/대화보기`"
    },
    {
      "id": "git_status",
      "title": "Git 상태 확인 가이드",
      "content": "## Git 상태 확인하기\n\n`/git status` 명령어를 사용하여 현재 Git 저장소의 상태를 확인할 수 있습니다:\n\n- 현재 브랜치 정보\n- 변경된 파일 목록\n- 스테이징된 파일\n- 추적되지 않는 파일 등의 정보가 포함됩니다.\n\n**별칭**: `/g status`, `/깃 상태`"
    },
    {
      "id": "git_commit",
      "title": "Git 커밋 가이드",
      "content": "## 변경 사항 커밋하기\n\n`/git commit` 명령어를 사용하여 변경된 모든 파일을 스테이징하고 커밋할 수 있습니다:\n\n- 설정에 따라 LLM을 사용하여 자동으로 적절한 커밋 메시지를 생성합니다.\n\n**별칭**: `/g commit`, `/깃 커밋`, `/깃 저장`"
    },
    {
      "id": "git_auto",
      "title": "자동 커밋 기능 가이드",
      "content": "## 자동 커밋 기능 사용하기\n\n자동 커밋 기능은 파일을 저장할 때마다 자동으로 변경 사항을 커밋하는 기능입니다:\n\n- `/git auto` - 자동 커밋 기능을 켜거나 끕니다.\n- `/git auto-on` - 자동 커밋 기능을 켭니다.\n- `/git auto-off` - 자동 커밋 기능을 끕니다.\n\n**별칭**: `/g auto`, `/깃 자동`, `/깃 자동커밋`\n\n자동 커밋 시 '[APE][Temporary]' 접두사가 붙어 임시 커밋임을 표시합니다."
    },
    {
      "id": "git_consolidate",
      "title": "임시 커밋 통합 가이드",
      "content": "## 임시 커밋 통합하기\n\n`/git consolidate` 명령어를 사용하여 임시 커밋들을 하나의 정식 커밋으로 통합할 수 있습니다:\n\n1. 최근 30개 커밋 중 '[APE][Temporary]' 접두사가 있는 임시 커밋을 식별합니다.\n2. 연속된 임시 커밋들만 그룹으로 묶습니다(중간에 일반 커밋이 있으면 별도 그룹으로 구분).\n3. 가장 최근의 연속된 임시 커밋 그룹만 통합합니다.\n4. LLM이 활성화된 경우, 모든 변경 내용을 분석하여 의미 있는 커밋 메시지를 생성합니다.\n\n**별칭**: `/g consolidate`, `/g squash`, `/깃 통합`, `/깃 임시통합`, `/깃 통합커밋`"
    },
    {
      "id": "git_solve",
      "title": "Git 충돌 해결 가이드",
      "content": "## Git 충돌 해결하기\n\n`/git solve` 명령어를 사용하여 Git 충돌을 해결할 수 있습니다:\n\n- 웹뷰를 통해 각 충돌에 대한 해결 제안을 보여주고, 사용자가 검토 후 승인할 수 있는 인터랙티브한 시스템을 제공합니다.\n- 각 충돌에 대해 여러 해결 전략(현재 브랜치, 타겟 브랜치, 기본 병합, LLM 지능형)을 선택할 수 있습니다.\n\n**별칭**: `/g solve`, `/git conflict`, `/깃 충돌`, `/충돌`, `/충돌해결`\n\n### 충돌 자동 해결 명령어\n\n- `/git solve-auto` - 모든 Git 충돌을 자동으로 해결합니다. 파일 유형과 충돌 내용에 따라 최적의 전략을 선택합니다.\n- `/git solve-ours` - 모든 Git 충돌을 현재 브랜치의 코드로 해결합니다.\n- `/git solve-theirs` - 모든 Git 충돌을 다른 브랜치의 코드로 해결합니다.\n- `/git solve-llm` - LLM을 사용해 Git 충돌을 지능적으로 해결합니다. 두 버전의 코드를 이해하여 최적의 병합 결과를 생성합니다."
    },
    {
      "id": "analyze",
      "title": "코드 분석 가이드",
      "content": "## 코드 분석하기\n\n`/analyze` 명령어를 사용하여 선택한 코드를 분석할 수 있습니다:\n\n1. VS Code 에디터에서 분석하려는 코드를 선택합니다.\n2. 채팅 인터페이스에 `/analyze` 명령어를 입력합니다.\n3. APE가 선택한 코드를 분석하여 결과를 채팅 창에 표시합니다.\n\n**별칭**: `/code`, `/분석`, `/코드`, `/코드분석`\n\n분석 결과에는 코드 기능 설명, 잠재적 문제점, 모범 사례 제안, 성능 고려사항 등이 포함됩니다."
    },
    {
      "id": "model",
      "title": "모델 관련 명령어 가이드",
      "content": "## 모델 관련 명령어\n\n### 사용 가능한 모델 확인하기\n\n`/model list` 명령어를 사용하면 현재 사용 가능한 모든 LLM 모델 목록을 볼 수 있습니다:\n\n- 각 모델의 이름과 간단한 설명이 포함됩니다.\n- **별칭**: `/모델 목록`, `/모델 리스트`\n\n### 특정 모델로 변경하기\n\n`/model use 모델이름` 명령어를 사용하여 대화에 사용할 LLM 모델을 변경할 수 있습니다:\n\n- 예: `/model use LLAMA4-MAVERICK`\n- **별칭**: `/model switch`, `/모델 사용`, `/모델 변경`\n- 사용 가능한 모델 목록은 `/model list` 명령어로 확인할 수 있습니다."
    },
    {
      "id": "settings",
      "title": "APE 설정 가이드",
      "content": "## APE 설정 변경하기\n\n`/settings` 명령어를 사용하여 VS Code 설정 페이지에서 APE 관련 설정을 변경할 수 있습니다:\n\n- LLM 모델, 자동 커밋, UI 테마 등 다양한 설정을 변경할 수 있습니다.\n\n**별칭**: `/config`, `/preferences`, `/설정`, `/환경설정`, `/프리퍼런스`"
    },
    {
      "id": "system",
      "title": "시스템 상태 가이드",
      "content": "## 시스템 상태 확인하기\n\n`/system` 명령어를 사용하여 APE 시스템의 현재 상태 정보를 확인할 수 있습니다:\n\n- **세션 정보**: 현재 세션 ID, 생성 시간, 마지막 업데이트 시간\n- **LLM 정보**: 현재 사용 중인 모델 및 모델 ID\n- **메모리 통계**: 총 메시지 수, 사용자/어시스턴트/시스템 메시지 수\n- **메모리 세부 정보**: 최근 메시지 기록(최대 5개) 내용 및 시간\n\n**별칭**: `/sys`, `/시스템`, `/상태`\n\n메모리 세부 정보만 보려면 `/system memory` 또는 `/시스템 메모리`"
    },
    {
      "id": "open",
      "title": "파일 열기 가이드",
      "content": "## 특정 파일 열기\n\n`/open 파일경로` 명령어를 사용하여 특정 파일을 VS Code 에디터에서 열 수 있습니다:\n\n- 예: `/open package.json`, `/open src/index.ts`\n- 파일 경로는 프로젝트 루트를 기준으로 합니다.\n\n**별칭**: `/file`, `/열기`, `/파일`, `/파일열기`"
    },
    {
      "id": "vault",
      "title": "Vault 시스템 가이드",
      "content": "## Vault(컨텍스트) 시스템 사용하기\n\n`/vault` 명령어를 사용하여 Vault 컨텍스트와 아이템을 관리할 수 있습니다:\n\n- Vault는 APE의 컨텍스트 관리 시스템으로, 자주 사용하는 정보나 코드 조각을 저장하고 재사용할 수 있게 해줍니다.\n\n**사용법**:\n- `/vault list` - 저장된 컨텍스트 목록 표시\n- `/vault show system-context` - 특정 컨텍스트 내용 보기\n- `/vault use system-item-1` - 특정 컨텍스트 아이템 사용\n- `/vault create personal 내 작업 메모` - 새 컨텍스트 생성\n- `/vault delete` - 컨텍스트 삭제\n\n**별칭**: `/컨텍스트`, `/볼트`, `/ctx`, `/context`"
    },
    {
      "id": "jira",
      "title": "Jira 이슈 관리 가이드",
      "content": "## Jira 이슈 관리하기\n\n`/jira` 명령어를 사용하여 Jira 이슈 관련 작업을 수행할 수 있습니다:\n\n- 이 기능을 사용하려면 Jira 설정이 미리 구성되어 있어야 합니다.\n\n**사용법**:\n- `/jira search` - Jira 이슈 검색\n- `/jira create` - 새 이슈 생성\n- `/jira update` - 이슈 업데이트\n- `/jira status` - 이슈 상태 확인\n- `/jira summary` - 이슈 요약 정보 표시\n\n**별칭**: `/j`, `/지라`, `/이슈`"
    },
    {
      "id": "todo",
      "title": "할 일 관리 가이드",
      "content": "## 할 일 항목 관리하기\n\n`/todo` 명령어를 사용하여 프로젝트 내에서 할 일 항목을 관리할 수 있습니다:\n\n**사용법**:\n- `/todo list` - 할 일 목록 표시\n- `/todo add 새 작업 추가` - 새 할 일 추가\n- `/todo update 작업ID 수정할내용` - 할 일 업데이트\n- `/todo delete 작업ID` - 할 일 삭제\n- `/todo status 작업ID 완료` - 할 일 상태 변경\n\n**별칭**: `/todos`, `/task`, `/tasks`, `/할일`, `/투두`, `/태스크`, `/작업`\n\n각 할 일 항목에는 고유 ID가 부여되며, 상태와 우선순위를 지정할 수 있습니다."
    },
    {
      "id": "rules",
      "title": "APE Rules 가이드",
      "content": "## APE Rules 관리하기\n\n`/rules` 명령어를 사용하여 APE Rules를 관리할 수 있습니다:\n\n- APE Rules는 LLM에 적용되는 규칙을 관리하는 시스템입니다.\n- 각 Rule은 마크다운 형식의 파일로 저장되며, 활성화된 Rules는 LLM 시스템 프롬프트에 자동으로 추가됩니다.\n\n**사용법**:\n- `/rules list` - 모든 규칙 목록 표시\n- `/rules active` - 활성화된 규칙 목록 표시\n- `/rules inactive` - 비활성화된 규칙 목록 표시\n- `/rules activate 규칙이름` - 규칙 활성화\n- `/rules deactivate 규칙이름` - 규칙 비활성화\n- `/rules create 규칙이름` - 새 규칙 생성\n- `/rules delete 규칙이름` - 규칙 삭제\n- `/rules open 규칙이름` - 규칙 파일 열기\n- `/rules info 규칙이름` - 규칙 정보 표시\n\n**별칭**: `/rule`, `/ape-rules`, `/룰`, `/규칙`, `/규칙관리`"
    },
    {
      "id": "natural_language",
      "title": "자연어 명령어 사용 가이드",
      "content": "## 자연어 슬래시 명령어 사용하기\n\nAPE는 한글 자연어 기반의 슬래시 명령어 해석을 지원합니다. 예를 들어:\n\n- `/뭐해야해`, `/뭐부터해야해`, `/도와줘` → `/help`(도움말) 명령어로 해석\n- `/기억해`, `/저장해`, `/메모`, `/노트` → `/memory`(메모리 저장) 명령어로 해석\n- `/볼트`, `/금고`, `/컨텍스트` → `/vault`(볼트) 명령어로 해석\n- `/깃상태`, `/깃`, `/깃커밋` → Git 관련 명령어로 해석\n- `/분석해`, `/코드분석`, `/검토` → `/analyze`(코드 분석) 명령어로 해석\n\n이 외에도 수많은 자연어 의도 매핑이 구현되어 있어 직관적인 명령어 사용이 가능합니다."
    },
    {
      "id": "git_workflow",
      "title": "자동 커밋 워크플로우 예제",
      "content": "## 자동 커밋 워크플로우 사용 예제\n\n다음과 같은 워크플로우로 자동 커밋 기능을 활용할 수 있습니다:\n\n1. `/git auto-on` 명령어로 자동 커밋 기능을 활성화합니다.\n2. 코드를 작성하고 저장할 때마다 변경 사항이 자동으로 커밋됩니다.\n3. 작업이 완료되면 `/git consolidate` 명령어를 사용하여 임시 커밋들을 하나의 의미 있는 커밋으로 통합합니다.\n4. LLM이 모든 변경 사항을 분석하여 적절한 커밋 메시지를 자동으로 생성합니다.\n5. 필요한 경우 `/git status` 명령어로 변경 사항을 확인할 수 있습니다."
    },
    {
      "id": "analysis_vault_workflow",
      "title": "코드 분석과 Vault 활용 예제",
      "content": "## 코드 분석과 Vault 시스템 함께 사용하기\n\n다음과 같은 워크플로우로 코드 분석 결과를 Vault에 저장하고 활용할 수 있습니다:\n\n1. 코드를 선택하고 `/analyze` 명령어를 사용하여 코드 분석을 수행합니다.\n2. 분석 결과가 나오면 `/vault create personal 코드분석결과` 명령어를 사용하여 Vault에 저장합니다.\n3. 나중에 `/vault show 코드분석결과` 명령어로 저장한 분석 결과를 확인할 수 있습니다.\n4. 또는 `/vault use 코드분석결과` 명령어로 저장된 분석 결과를 현재 대화에 가져올 수 있습니다."
    },
    {
      "id": "git_conflict_workflow",
      "title": "Git 충돌 해결 워크플로우 예제",
      "content": "## Git 충돌 해결 워크플로우\n\nAPE의 Git 충돌 해결 시스템은 다음과 같이 사용할 수 있습니다:\n\n1. Git 충돌이 발생하면 `/git solve` 명령어를 실행합니다.\n2. 웹뷰가 열리고 각 충돌 영역이 표시됩니다.\n3. 각 충돌에 대해 다음 해결 전략 중 하나를 선택할 수 있습니다:\n   - 현재 브랜치 코드 선택 (ours)\n   - 타겟 브랜치 코드 선택 (theirs)\n   - 기본 병합 선택\n   - LLM 지능형 병합 선택 (코드 문맥을 고려한 최적의 병합)\n4. 모든 충돌에 대한 선택이 완료되면 \"해결 적용\" 버튼을 클릭하여 변경 사항을 적용합니다.\n5. 시간을 절약하려면 `/git solve-auto` 또는 `/git solve-llm` 명령어를 사용하여 모든 충돌을 한 번에 자동으로 해결할 수도 있습니다."
    }
  ]
}